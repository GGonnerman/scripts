#!/bin/bash

# TODO:
#     Fix help message
#     Figure out naming scheme for bash
#     No playlist allowed if not installation
#     If deletes move than 50, ask for verification (unless some flag like -ignore-deletions)
#     Make it okay to quit in the middle of running

set -eu

function usage() {
	echo "Usage: youtube-sync [--help|-h] [--binary] [--option opt] [--] files..." 1>&2
	exit 0
}

function youtubem4a() {
	youtube-dl \
		--cookies ~/.youtube/cookies.txt \
		-f bestaudio \
		--force-ipv4 \
		--audio-quality 0 \
		--audio-format m4a \
		--ignore-errors \
		--extract-audio \
		--add-metadata \
		--embed-thumbnail \
		--postprocessor-args "-id3v2_version 3" \
		--output "%(title)s (%(id)s).%(ext)s" \
		-- "$@" || true
	#--external-downloader aria2c \
	#--external-downloader-args "-c -j 3 -x 3 -s 3 -k 1M" \
}

function youtubemp4() {
	youtube-dl \
		--cookies ~/.youtube/cookies.txt \
		-f bestaudio \
		--force-ipv4 \
		-f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' \
		--ignore-errors \
		--add-metadata \
		--embed-thumbnail \
		--postprocessor-args "-id3v2_version 3" \
		--output "[$1] %(title)s (%(id)s).%(ext)s" \
		--external-downloader aria2c \
		--external-downloader-args "-x 16 -s 16 -k 1M" \
		-- "${@:2}" || true
}

install=false
forcereload=false
updaterecursively=false
fast=false
playlist=''
file_type=''
directory=''
while [[ $# -gt 0 ]]; do
	case $1 in
		--install|-i) install=true ;;
		--force-reload|-fr) forcereload=true ;;
		--update-recursively|-ur) updaterecursively=true ;;
		--fast|-f) fast=true ;;
		--playlist|-p) shift; playlist="$1" ;;
		--type|-t) shift; file_type="$1" ;;
		--directory|-dir|-d) shift; directory="$1" ;;
		--help|-h) usage ;;
		--) shift; break ;;
		-*) echo "Unknown flag '$1'" 1>&2; usage ;;
		*) break ;;
	esac
	shift
done

ping -c1 unix.com &>/dev/null || ( echo "No internet connection detected, exitting" && exit 1 )

if [[ -z $directory ]]
then
	if [[ -n $@ ]]
	then
		directory=$@
	else
		echo "Directory not specified... running on current directory"
		directory="."
	fi
fi

[[ -d "$directory" ]] || mkdir "$directory"

pushd "$directory" >/dev/null
[[ "$directory" != "." ]] && echo "Traversing to directory $directory"

# Quickstop for recursive updating
if $updaterecursively
then
	shopt -s globstar
	for file in ./**; do
		[[ $file = "./" ]] && continue
		if [[ -d $file ]]; then
			youtube-sync "$file" || true
		fi
	done
	exit
fi

# Activate intallation mode
if $install
then
	echo "Activating Installation Mode..."
	[[ -z $playlist ]] && echo "Please enter a playlist with the -p flag" && exit 1
	[[ -z $file_type ]] && echo "Please enter a file type (m4a or mp4) with the -t flag" && exit 1
	echo "playlist:$playlist" > .youtube-sync
	echo "type:$file_type" >> .youtube-sync
	touch .youtube-sync-ids
else
	[[ ! -e .youtube-sync ]] && echo "Not a youtube-sync directory" && exit 1
	echo "Grabbing sync information..."
	playlist=$(grep -Pio "(?<=playlist:).*" .youtube-sync)
	file_type=$(grep -Pio "(?<=type:).*" .youtube-sync)
fi

# Verify that the file type is either m4a or mp4
if [ "$file_type" != "mp4" ] && [ "$file_type" != "m4a" ] ; then
	echo "Please choose m4a or mp4 as the file type"
	exit 1
fi

#PLAYLIST="https://www.youtube.com/playlist?list=PLTUGVLN_NozZdqKlMzw-jJEee7FfMiZoV"

$forcereload && echo "Forcing a full reload..."

[[ ! -e .youtube-sync-ids ]] && echo "Cannot find a youtube sync data folder; Creating one" && touch .youtube-sync-ids

# Probably bad solution, but || true makes it so it doesn't crash
echo "Retrieving playlist..."
youtube-dl --cookies ~/.youtube/cookies.txt --flat-playlist --ignore-errors --no-warnings --get-id "$playlist" > .youtube-sync-new_ids || true

OLDIDS=$(cat .youtube-sync-ids)
NEWIDS=$(cat .youtube-sync-new_ids)

IDSTODEL=()
IDSTOINS=()
IDSTOKEP=()

echo "Checking for deletions..."
for id in $OLDIDS
do
	if $forcereload || [[ -z $(grep -- "$id" .youtube-sync-new_ids) ]]; then
		IDSTODEL+=($id)
	fi
done

echo "Checking for installations..."
for id in $NEWIDS
do
	if $forcereload || [[ -z $(grep -- "$id" .youtube-sync-ids) ]]; then
		IDSTOINS+=($id)
	else
		IDSTOKEP+=($id)
	fi
done

# Optional code to stop if too many deletions
# if [[ ${#IDSTODEL[@]} -gt 20 ]]
# then
# 	echo "Too many"
# fi

rm .youtube-sync-ids

# Delete old videos
for id in ${IDSTODEL[@]}
do
	name=$( find . -maxdepth 1 -iname "*$id*" | cut -c 3- )
	if [[ -n "$name" ]]; then
		echo "Deleting $name"
		rm -f -- *$id*
	fi
done

# Add current videos to id list
for id in ${IDSTOKEP[@]}
do
	echo "$id" >> .youtube-sync-ids
done

# Install all new videos
count=0
for id in ${IDSTOINS[@]}
do
	count=$((count + 1))
	# Deleting any partial files from previous failure
	if [[ -n $( find . -maxdepth 1 -iname "*$id*" ) ]]; then
		echo "Removing partial files for $id"
		rm -f -- *$id*
	fi
	echo "Installing $id"
	# Check which kind of file to download, and download it
	if [[ "$file_type" = "m4a" ]]; then
		youtubem4a "$id"
	else
		youtubemp4 "$count" "$id"
	fi
	# If successfully downloaded, add to id list
	if [[ $( find . -maxdepth 1 -iname "*$id*" | wc -l ) -eq 1 && -n $( find . -maxdepth 1 -iname "*$id).m4a" ) || -n $( find . -maxdepth 1 -iname "*$id).mp4" ) ]]; then
		echo "$id" >> .youtube-sync-ids
	fi
	# If fast, continue; otherwise short random delay
	$fast && sleep $[ ( $RANDOM % 30 )  + 5 ]s
done

# Rename to match current playlist order
if [[ "$file_type" = "mp4" ]]; then
	echo "Renaming files to fit playlist order"
	count=0
	for id in $NEWIDS
	do
		count=$((count + 1))
		name=$( find . -maxdepth 1 -iname "*$id*" | cut -c 3- )
		mv "$name" "${name//\[[0-9]*\]/\[$count\]}" 2>/dev/null
	done
fi

popd >/dev/null

echo "Finished executing... quitting"
