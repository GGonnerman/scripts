#!/bin/bash

# TODO:
#     Fix help message
#     Figure out naming scheme for bash
#     No playlist allowed if not installation
#     If deletes move than 50, ask for verification (unless some flag like -ignore-deletions)
#     Make it okay to quit in the middle of running

set -eu

function usage() {
	echo "Usage: youtube-sync.sh [--help|-h] [--binary] [--option opt] [--] files..." 1>&2
	exit 0
}

install=''
forcereload=''
updaterecursively=''
playlist=''
file_type=''
directory=''
fast=''
while [[ $# -gt 0 ]]; do
	case $1 in
		--install|-i) install='1' ;;
		--fast|-f) fast='1' ;;
		--force-reload|-fr) forcereload='1' ;;
		--update-recursively|-ur) updaterecursively='1' ;;
		--playlist|-p) shift; playlist="$1" ;;
		--type|-t) shift; file_type="$1" ;;
		--directory|-dir|-d) shift; directory="$1" ;;
		--help|-h) usage ;;
		--) shift; break ;;
		-*) echo "Unknown flag '$1'" 1>&2; usage ;;
		*) break ;;
	esac
	shift
done

ping -c1 unix.com &>/dev/null || ( echo "No internet connection detected, exitting" && exit 1 )

if [[ -z $directory ]]
then
	if [[ -n $@ ]]
	then
		directory=$@
	else
		echo "Directory not specified... running on current directory"
		directory="."
	fi
fi

[[ -d "$directory" ]] || mkdir "$directory"

pushd "$directory" >/dev/null
[[ "$directory" != "." ]] && echo "Traversing to directory $directory"

# Quickstop for recursive updating
if [[ -n $updaterecursively ]]
then
	shopt -s globstar
	for file in ./**; do
		[[ $file = "./" ]] && continue
		if [[ -d $file ]]; then
			youtube-sync "$file"
		fi
	done
	exit
fi

# Activate intallation mode
if [[ -n $install ]]
then
	echo "Activating Installation Mode..."
	[[ -z $playlist ]] && echo "Please enter a playlist with the -p flag" && exit 1
	[[ -z $file_type ]] && echo "Please enter a file type (m4a or mp4) with the -t flag" && exit 1
	echo "playlist:$playlist" > .youtube-sync
	echo "type:$file_type" >> .youtube-sync
	touch .youtube-sync-ids
else
	[[ ! -e .youtube-sync ]] && echo "Not a youtube-sync directory" && exit
	echo "Grabbing sync information..."
	playlist=$(grep -Pio "(?<=playlist:).*" .youtube-sync)
	file_type=$(grep -Pio "(?<=type:).*" .youtube-sync)
fi

# Verify that the file type is either m4a or mp4
if [ "$file_type" != "mp4" ] && [ "$file_type" != "m4a" ] ; then
	echo "Please choose m4a or mp4 as the file type"
	exit
fi

#PLAYLIST="https://www.youtube.com/playlist?list=PLTUGVLN_NozZdqKlMzw-jJEee7FfMiZoV"

[[ -n $forcereload ]] && echo "Forcing a full reload..."

[[ ! -e .youtube-sync-ids ]] && echo "Cannot find a youtube sync data folder" && touch .youtube-sync-ids
# Probably bad solution, but || true makes it so it doesn't crash
echo "Retrieving playlist..."
youtube-dl --cookies ~/.youtube/cookies.txt --flat-playlist --ignore-errors --no-warnings --get-id "$playlist" > .youtube-sync-new_ids || true
echo "Playlist retrieved"
OLDIDS=$(cat .youtube-sync-ids)
NEWIDS=$(cat .youtube-sync-new_ids)
echo "Checking for deletions..."
for id in $OLDIDS
do
	if [[ -z $(grep -- "$id" .youtube-sync-new_ids) || -n $forcereload ]]
	then
		echo "Deleting $id: $(find -iname *$id* | tail -c +3 | head -c -19)..."
		rm -f -- *$id*
	fi
done
echo "Checking for new installations"
count=0
for id in $NEWIDS
do
	count=$((count + 1))
	if [[ -z $(grep -- "$id" .youtube-sync-ids) || -n $forcereload ]]
	then
		echo "Attempting $id"
		if [[ "$file_type" = "m4a" ]]
		then
			youtube-dl \
				--cookies ~/.youtube/cookies.txt \
				-f bestaudio \
				--force-ipv4 \
				--audio-quality 0 \
				--audio-format m4a \
				--ignore-errors \
				--extract-audio \
				--add-metadata \
				--embed-thumbnail \
				--postprocessor-args "-id3v2_version 3" \
				--output "%(title)s [%(id)s].%(ext)s" \
				-- "$id" || true
			#--external-downloader aria2c \
			#--external-downloader-args "-c -j 3 -x 3 -s 3 -k 1M" \
		else
			youtube-dl \
				--cookies ~/.youtube/cookies.txt \
				-f bestaudio \
				--force-ipv4 \
				-f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' \
				--ignore-errors \
				--add-metadata \
				--embed-thumbnail \
				--postprocessor-args "-id3v2_version 3" \
				--output "[$count] %(title)s (%(id)s).%(ext)s" \
				--external-downloader aria2c \
				--external-downloader-args "-x 16 -s 16 -k 1M" \
				-- "$id" || true
		fi
		[[ -z "$fast" ]] && sleep $[ ( $RANDOM % 30 )  + 5 ]s
	fi
done

mv .youtube-sync-new_ids .youtube-sync-ids

popd >/dev/null

echo "Finished executing... quitting"
